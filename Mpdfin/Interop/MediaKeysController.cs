// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Mpdfin.Interop;
#pragma warning restore 0105

namespace Mpdfin.Interop
{
    public static partial class MediaKeysController
    {
        public const string NativeLib = "mpdfin_mediakeys";

        static MediaKeysController()
        {
        }


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "media_keys_destroy")]
        public static extern MediaKeysError media_keys_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static void media_keys_destroy_checked(ref IntPtr context)
        {
            var rval = media_keys_destroy(ref context);;
            if (rval != MediaKeysError.Ok)
            {
                throw new InteropException<MediaKeysError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "media_keys_new")]
        public static extern MediaKeysError media_keys_new(ref IntPtr context, string name);

        public static void media_keys_new_checked(ref IntPtr context, string name)
        {
            var rval = media_keys_new(ref context, name);;
            if (rval != MediaKeysError.Ok)
            {
                throw new InteropException<MediaKeysError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "media_keys_set_metadata")]
        public static extern MediaKeysError media_keys_set_metadata(IntPtr context, FFIMediaMetadata metadata);

        public static void media_keys_set_metadata_checked(IntPtr context, FFIMediaMetadata metadata)
        {
            var rval = media_keys_set_metadata(context, metadata);;
            if (rval != MediaKeysError.Ok)
            {
                throw new InteropException<MediaKeysError>(rval);
            }
        }

    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct FFIMediaMetadata
    {
        public string title;
        public string album;
        public string artist;
        public string cover_url;
    }

    public enum MediaKeysError
    {
        Ok = 0,
        NullPassed = 1,
        Panic = 2,
        OtherError = 3,
    }


    public partial class MediaPlayerService : IDisposable
    {
        private IntPtr _context;

        private MediaPlayerService() {}

        public static MediaPlayerService New(string name)
        {
            var self = new MediaPlayerService();
            var rval = MediaKeysController.media_keys_new(ref self._context, name);
            if (rval != MediaKeysError.Ok)
            {
                throw new InteropException<MediaKeysError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = MediaKeysController.media_keys_destroy(ref _context);
            if (rval != MediaKeysError.Ok)
            {
                throw new InteropException<MediaKeysError>(rval);
            }
        }

        public void SetMetadata(FFIMediaMetadata metadata)
        {
            var rval = MediaKeysController.media_keys_set_metadata(_context, metadata);
            if (rval != MediaKeysError.Ok)
            {
                throw new InteropException<MediaKeysError>(rval);
            }
        }

        public IntPtr Context => _context;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
